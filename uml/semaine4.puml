@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam style strictuml
hide empty members


package Game
{
    package Elements
    {

        class Element <<Interface>>
            {
                + getElmt() : String
                + getFortContre(): String
                + getFaibleContre() : String
            }

        class Terre implements Element
            {
                + getElmt() : String
                + getFortContre(): String
                + getFaibleContre() : String
            }

        class Eau implements Element
            {
                + getElmt() : String
                + getFortContre(): String
                + getFaibleContre() : String
            }

        class Feu implements Element
            {
                + getElmt() : String
                + getFortContre(): String
                + getFaibleContre() : String
            }

        class Air implements Element
            {
                + getElmt() : String
                + getFortContre(): String
                + getFaibleContre() : String
            }
    }

    package EnsemblePokemon
    {
        class  EnsemblePokemon <<Interface>>
        {
            + getPokemon(index:Integer):Pokemon
            + transferPokemon(pokemon:Pokemon ,desitnation:EnsemblePokemon)
            + getEnsemble()
            + getPokemonByName(nom:String) : Pokemon
            + getNbPokmon() : int
            + getEnsemble() : Pokemon[*]
        }
        class  PokemonGenerateur <<static>>
        {
            - {static} listeNomsPokemon : String[*]
            - {static} listePouvoirs : Pouvoirs[*]
            + {static} genererPokemon()

        }
        class Defausse implements EnsemblePokemon
            {
                - m_defausse : Pokemon[*]
                + <<Create>> Defausse()
                + getPokemon(index:Integer):Pokemon
                + transferPokemon(pokemon:Pokemon ,from:EnsemblePokemon , to:EnsemblePokemon )
                + getPokemonByName(name : String) : Pokemon
                + getNbPokmon() : Integer
                + getEnsemble() : Pokemon[*]
            }

        class MainDuJoueur implements EnsemblePokemon
            {
                - m_mainJoueur: Pokemon[5]
                + <<Create>> MainDuJoueur()
                + getPokemon(index:Integer):Pokemon
                + getPokemonByName(name : String) : Pokemon
                + getNbPokmon() : Integer
                + transferPokemon(pokemon:Pokemon ,from:EnsemblePokemon , to:EnsemblePokemon )
                + getEnsemble() : Pokemon[*]
            }

        class Terrain implements EnsemblePokemon
            {
                - m_terrain: Pokemon[3]
                + <<Create>> Terrain()
                + ajouterPokemon(pokemon:Pokemon)
                + getPokemon(index:Integer): Pokemon
                + getPokemonByName(name : String) : Pokemon
                + getPokemonAvecLeMoinsDeVie() : Pokemon
                + transferPokemon(pokemon:Pokemon , destination:EnsemblePokemon )
                + getEnsemble() : Pokemon[*]
                + getNbPokmon() : Integer

            }

        class Pioche implements EnsemblePokemon
            {
                - m_pioche: Pokemon[*]
                + <<Create>> Pioche()
                + <<Create>> Pioche(nbpokemon:Integer)
                + getPokemonByName(String) : Pokemon
                + getPokemon(index:Integer): Pokemon
                + getEnsemble() : Pokemon[*]
                + getNbPokmon() : Integer
                + transferPokemon(pokemon:Pokemon , to:EnsemblePokemon )
            }
    }

    package Joueur
    {
        class Player <<Interface>>
        {
            + isJoueur1() : Boolean
            + setJoueur1()
            + piocherPokemon(pokemon:Pokemon)
            + placeSurTerrain(pokemon:Pokemon)
            + getM_defausse() : Defausse
            + getM_main() : MainDuJoueur
            + getM_nom() : String
            + getM_terrain() : Terrain
            + joue(adversaire:Player)
        }
        class JoueurHumain implements Player
                    {
                        - m_nom : String
                        - m_joueur1 : Boolean
                        + <<Create>> Joueur(nom: String)
                        + getM_defausse() : Defausse
                        + getM_main() : MainDuJoueur
                        + getM_nom() : String
                        + getM_terrain() : Terrain
                        + getM_pioche() : Pioche
                        + piocherPokemon(pokemon:Pokemon)
                        + placeSurTerrain(pokemon:Pokemon)
                        + isJoueur1() : Boolean
                        + setJoueur1(etat:Boolean)
                        + piocherPokemon(pokemon:Pokemon)
                        + setPioche(Pioche)
                        + joue(adversaire:Player)

                    }
        class RobotPlayer implements Player
                            {
                                - m_nom : String
                                - m_joueur1 : Boolean
                                + <<Create>> RobotPlayer(nom: String)
                                + getM_defausse() : Defausse
                                + getM_main() : MainDuJoueur
                                + getM_nom() : String
                                + getM_terrain() : Terrain
                                + getM_pioche() : Pioche
                                + piocherPokemon(pokemon:Pokemon)
                                + placeSurTerrain(pokemon:Pokemon)
                                + isJoueur1() : Boolean
                                + setJoueur1(etat:Boolean)
                                + piocherPokemon(pokemon:Pokemon)
                                + setPioche(Pioche)
                                + joue(adversaire:Player)
                                + choisirCible((terrain : Terrain , attaquant:Pokemon) : Pokemon
                                + getPokemonFromMain(int) : Pokemon
                            }
    }

    class Pokemon
    {
        - m_nom: String
        - m_vie : Integer
        - m_vieMax : Integer
        - m_attaque : Integer
        - m_pouvoir : Pouvoir
        + <<Create>> Pokemon(nom: String , elmt:Element , vie : Integer , attaque : Integer )
        + attaquer()
        + estVivant() : Boolean
        + getVie() : Integer
        + setVie(valeur : Integer)
        + getM_attaque() : Integer
        + setM_attaque(valeur : Integer)
        + getM_nom() : String
        + getElement() : Element
        + getM_Pouvoir() : Pouvoir
        + setPouvoir(pouvoir : Pouvoir)
        + getNom_Pouvoir() : String
        + presenter() : void
    }

    package Jeu
    {
        class Tour
        {
            - m_numTour : Integer

        }
        class LeJeu
        {
            - m_jHumain : JoueurHumain
            - m_jRobot : RobotPlayer
            - m_numTour : Integer
            - m_arret : Boolean
            + <<Create>> LeJeu(humain:JoueurHumain , robot : RobotPlayer)
            + Lunch(humain: Game.JoueurHumain , Rrobot : RobotPlayer )
            + MainJoueurs(tailleMain: Integer)
            + Launch()
            + choix1erJoueur()
            + piochesJoueurs()
            + placementPokemon( nbJ1 : Integer, nbRobot : Integer)
            + verifierFinJeu() : void
            + nbPokemonRestans(joueur : Player) : Integer
            + tousPokemonsElimines(joueur : Player) : Boolean
            + phaseAttaquer( tour : Integer) : void
            + PokemonMort(pokemon:Pokemon) : Boolean
            + getM_jHumain() : JoueurHumain
            + getM_jRobot() : RobotPlayer
            + grtM_numTour() : Integer
        }
        abstract Affichage
        {
            + afficherJeu(jeu : LeJeu)
            + afficherMain(main : MainDuJoeur)
            + afficherTerrain(terrain : Terrain)
            + afficherPioche(pioche : Pioche)
            + afficherDefausse(defausse : Defausse)
            + afficherPokemon(pokemons : ListePokemon)
        }
    }

}


Pioche "1" *---> "20..21\n-" Pokemon : composé de \t\t >
MainDuJoueur "1" *---> "5\n" Pokemon : composé de \t\t >
Terrain "1" *---> "3\n-" Pokemon : composé de \t\t >
Defausse "1" *---> "*\n-" Pokemon : composé de \t\t >

Player "1" *---> "1\n-m_terrain" Terrain : Possède  \t\t >
Player "1" *---> "1\n-m_pioche" Pioche : Possède \t\t >
Player "1" *---> "1\n-m_main" MainDuJoueur : Possède \t\t >
Player "1" *---> "1\n-m_defausse" Defausse : Possède \t\t >
Pokemon "\n 1" *--> "1\n-m_element" Element : Possède\n\n >

Game.EnsemblePokemon.EnsemblePokemon ..> PokemonGenerateur : <<uses>>
LeJeu ..> Player : <<uses>>
LeJeu ..> Affichage : <<uses>>



@enduml
