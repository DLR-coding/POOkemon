@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam style strictuml
hide empty members


package Game
{
    package Elements
    {

        class Element <<Interface>>
            {
                + getElmt() : String
                + getFortContre(): String
                + getFaibleContre() : String
            }

        class Terre implements Element
            {
                + getElmt() : String
                + getFortContre(): String
                + getFaibleContre() : String
            }

        class Eau implements Element
            {
                + getElmt() : String
                + getFortContre(): String
                + getFaibleContre() : String
            }

        class Feu implements Element
            {
                + getElmt() : String
                + getFortContre(): String
                + getFaibleContre() : String
            }

        class Air implements Element
            {
                + getElmt() : String
                + getFortContre(): String
                + getFaibleContre() : String
            }
    }

    package EnsemblePokemon
    {
        class EnsemblePokemon <<Interface>>
                        {
                            + ajouterPokemon(pokemon:Pokemon): Void
                            + getPokemon(index:Integer):Pokemon
                            + retirerPokemon((pokemon:Pokemon):void
                            +getPokemonByName(name : String) :Pokemon
                            +getNbPokmon() : Integer
                        }
        class  ListePokemon <<static>>
        {
            - {static} listeNomsPokemon : String[*]
            + {static} genererPokemon()

        }
        class Defausse implements EnsemblePokemon
            {
                - m_defausse : Pokemon[*]
                + <<Create>> Defausse()
                +getNombreDePokemons() : Integer
                + ajouterPokemon(pokemon:Pokemon): Void
                + getPokemon(index:Integer):Pokemon
                + retirerPokemon((pokemon:Pokemon):void
                +getPokemonByName(name : String) : Pokemon
                +getNbPokmon() : Integer
            }

        class MainDuJoueur implements EnsemblePokemon
            {
                - m_mainJoueur: Pokemon[5]
                + <<Create>> MainDuJoueur()
                + ajouterPokemon(pokemon:Pokemon): Void
                + getPokemon(index:Integer):Pokemon
                + retirerPokemon((pokemon:Pokemon):void
                +GetPokemonByName(name : String) : Pokemon
                +getNbPokmon() : Integer
            }

        class Terrain implements EnsemblePokemon
            {
                - m_terrain: Pokemon[3]
                + <<Create>> Terrain()
                + ajouterPokemon(pokemon:Pokemon) : void
                + getPokemon(index:Integer): Pokemon
                + retirerPokemon(pokemon:Pokemon) : void
                + getPokemonByName(name : String) : Pokemon
                + getM_terrain() : ListePokemon
                + getPokemonAvecLeMoinsDeVie() : Pokemon
            }

        class Pioche implements EnsemblePokemon
            {
                - m_pioche: Pokemon[*]
                + <<Create>> Pioche()
                + <<Create>> Pioche(nbpokemon:Integer)
                + ajouterPokemon(pokemon:Pokemon) : void
                + retirerPokemon(pokemon:Pokemon) : void
                + getPokemonByName (name : String) : Pokemon
                + getPokemon(index:Integer): Pokemon
                + getNbPokmon() : Integer
            }
    }

    package Joueur
    {
        class Player <<Interface>>
                                {
                                    + isJoueur1() : Boolean
                                    + setJoueur1() : Boolean
                                    + GetPokemonFromPioche(index:Integer) : Pokemon
                                    + piocherPokemon(pokemon:Pokemon):void
                                    + placeSurTerrain(pokemon:Pokemon):void
                                    + getM_defausse() : Defausse
                                    + getM_main() : MainDuJoueur
                                    + getM_nom() : String
                                    + getM_terrain : Terrain
                                    + joue(adversaire : Player) : void
                                }
        class JoueurHumain implements Player
                    {
                        - m_nom : String
                        - m_joueur1 : Boolean
                        - m_main : MainDuJoueur
                        - m_pioche : Pioche
                        - m_terrain : Terrain
                        - m_defausse : Defausse
                        + <<Create>> Joueur(nom: String)
                        + GetPokemonFromPioche(index:Integer) : Pokemon
                        + piocherPokemon(pokemon:Pokemon):void
                        + placeSurTerrain(pokemon:Pokemon):void
                        + getM_defausse() : Defausse
                        + getM_main() : MainDuJoueur
                        + getM_nom() : String
                        + getM_terrain() : Terrain
                        + isJoueur1() : Boolean
                        + setPioche(pioche : Pioche) : void
                        + setJoueur1(bool Boolean) : void
                        + joue(adversaire : Player) : void
                        + getM_pioche() : Pioche
                    }
        class RobotPlayer implements Player
                            {
                               - m_nom : String
                                                       - m_joueur1 : Boolean
                                                       - m_main : MainDuJoueur
                                                       - m_pioche : Pioche
                                                       - m_terrain : Terrain
                                                       - m_defausse : Defausse
                                                       + <<Create>> RobotPlayer(nom: String)
                                                       + GetPokemonFromPioche(index:Integer) : Pokemon
                                                       + piocherPokemon(pokemon:Pokemon):void
                                                       + placeSurTerrain(pokemon:Pokemon):void
                                                       + getM_defausse() : Defausse
                                                       + getM_main() : MainDuJoueur
                                                       + getM_nom() : String
                                                       + getM_terrain() : Terrain
                                                       + isJoueur1() : Boolean
                                                       + setPioche(pioche : Pioche) : void
                                                       + choisirCible(adversairePokemon : Terrain, attaquant : Pokemon) : Pokemon
                                                       + joue(adversaire : Player) : void
                                                       + getM_pioche() : Pioche
                            }
    }

    class Pokemon
    {
        - m_nom: String
        - m_health : Integer
        - m_atk : Integer
        - m_vieMax : Integer
        - m_elements : Element
        + <<Create>> Pokemon(nom: String)
        + <<Create>> Pokemon(nom: String,elements : Element,vie : Integer,attaque Integer)
        + Attaquer() : Void
        + getVie() : Integer
        + getM_attaque() : Integer
        + getNom() : String
        + getM_elements() : Element
        + presenter() : void
        + getM_vieMax() : Integer
    }

    package Jeu
    {
        class LeJeu
        {
            - m_jHumain : JoueurHumain
            - m_jRobot : RobotPlayer
            - m_numTour : Integer
            - m_arret : Boolean
            + <<Create>> LeJeu(humain:JoueurHumain , robot : RobotPlayer)
            + Lunch(humain:Game.JoueurHumain) : void
            + MainJoueurs(tailleMain: Integer)
            + choix1erJoueur() : void
            + piochesJoueurs() : void
            + placementPokemon() : void
            + verifierFinJeu() : void
            + nbPokemonRestans(joueur Player) : Integer
            + tousPokemonsElimines(joueur Player) : Boolean
            + phaseAttaquer( tour : Integer) : void
            + PokemonMort(pokemon:Pokemon) : Boolean
            + AjouterDefausse(joueur : Player,pokemon Pokemon) : void
            + getM_jHumain() : JoueurHumain
            + getM_jRobot() : RobotPlayer
            + grtM_numTour() : Integer
        }
        abstract Affichage
        {
            + afficherJeu(jeu : LeJeu) : Void
            + afficherMain(main : MainDuJoeur): Void
            + afficherTerrain(terrain : Terrain) : Void
            + afficherPioche(pioche : Pioche) : Void
            + afficherDefausse(defausse : Defausse) : Void
            + afficherPokemon(pokemons : ListePokemon) : Void
        }
    }

}


Pioche "1" *---> "20..21\n-" Pokemon : composé de \t\t >
MainDuJoueur "1" *---> "5\n" Pokemon : composé de \t\t >
Terrain "1" *---> "3\n-" Pokemon : composé de \t\t >
Defausse "1" *---> "*\n-" Pokemon : composé de \t\t >

Player "1" *---> "1\n-m_terrain" Terrain : composé de \t\t >
Player "1" *---> "1\n-m_pioche" Pioche : composé de \t\t >
Player "1" *---> "1\n-m_main" MainDuJoueur : composé de \t\t >
Player "1" *---> "1\n-m_defausse" Defausse : composé de \t\t >
Pokemon "\n 1" *--> "1\n-m_element" Element : Possède\n\n >

Game.EnsemblePokemon.EnsemblePokemon ..> ListePokemon : <<uses>>
LeJeu ..> Player : <<uses>>
LeJeu ..> Affichage : <<uses>>



@enduml
