@startuml
'https://plantuml.com/class-diagram

top to bottom direction
skinparam linetype ortho

package Game
{
    package Jeu
    {
        class Affichage
        {
          + {static} afficherTerrain(Terrain)
          +{static} afficherDefausse(Defausse)
          +{static} afficherMain(MainDuJoueur)
          +{static} afficherJeu(Tour)
          +{static} clearConsole()
          +{static} afficherPokemon(List<Pokemon>)
          +{static} adjustLength(String, Integer): String
          +{static} afficherPioche(Pioche)
        }

        class Partie
        {

          - m_arret: Boolean
          - m_jRobot: RobotPlayer
          - m_jHumain: JoueurHumain
          - m_numTour: Integer
          + <<Create>> Partie(JoueurHumain, RobotPlayer)
          + Lunch()
          + verifierFinJeu()
          + nbPokemonsRestants(Player): Integer
          + tousPokemonsElimines(Player): Boolean
        }

        class Tour {

          - m_jHumain: JoueurHumain
          - m_jRobot: RobotPlayer
          - m_numTour: Integer
          - m_arret: Boolean
          + <<Create>> Tour(humain:JoueurHumain, robot:RobotPlayer)
          + placementPokemon(nbJ1:Integer, nbRobot:Integer)
          + MainJoueurs(taille : Integer)
          + Affichage()
          + PokemonMort(pokemon:Pokemon): Boolean
          + phaseAttaquer(numTour : Integer)
          + Pouvoir(joueur:Player)
          + choix1erJoueur()
          + verifMort()
          + piochesJoueurs()
          + getM_numTour(): Integer
          + getM_jHumain(): JoueurHumain
          + getM_jRobot(): RobotPlayer

        }

    }
    package Joueur
    {
        class JoueurHumain {

          - m_joueur1: Boolean
          - m_nom: String
          - m_terrain: Terrain
          - m_pioche: Pioche
          - m_defausse: Defausse
          - m_main: MainDuJoueur
          + <<Create>> JoueurHumain(nom:String)
          + isJoueur1(): Boolean
          + getPokemonFromPioche(index:Integer): Pokemon
          + placeSurTerrain(pokemon:Pokemon)
          + getM_defausse(): Defausse
          + getM_pioche(): Pioche
          + joue(adversaire:Player): Boolean
          + getM_terrain(): Terrain
          + getM_main(): MainDuJoueur
          + setPioche(pioche:Pioche)
          + getM_nom(): String
          + piocherPokemon(p:Pokemon)
          + UtilisePouvoir(index:Integer): Boolean
          + setJoueur1(etat:Boolean)
          + getPokemonFromMain(index:Integer): Pokemon
        }



        interface Player << interface >> {
          + joue(adversaire:Player): Boolean
          + getM_nom(): String
          + setJoueur1(etat:Boolean)
          + isJoueur1(): Boolean
          + getM_defausse(): Defausse
          + getM_main(): MainDuJoueur
          + UtilisePouvoir(index:Integer): Boolean
          + getPokemonFromPioche(index:Integer): Pokemon
          + placeSurTerrain(pokemon:Pokemon)
          + getM_terrain(): Terrain
          + getPokemonFromMain(index:Integer): Pokemon
          + piocherPokemon(pokemon:Pokemon)
        }

        class RobotPlayer
        {
          - m_terrain: Terrain
          - m_joueur1: Boolean
          - m_defausse: Defausse
          - m_pioche: Pioche
          - m_main: MainDuJoueur
          - m_nom: String
          + <<Create>> RobotPlayer(nom:String)
          + getM_nom(): String
          + getM_defausse(): Defausse
          + getM_pioche(): Pioche
          + setJoueur1(etat:Boolean)
          + getM_terrain(): Terrain
          + isJoueur1(): Boolean
          + setPioche(pioche:Pioche)
          + getPokemonFromMain(index:Integer): Pokemon
          + getPokemonFromPioche(index:Integer): Pokemon
          + placeSurTerrain(pokemon:Pokemon)
          + joue(adversiare:Player): Boolean
          + piocherPokemon(pokemon:Pokemon)
          + UtilisePouvoir(index:Integer): Boolean
          + getM_main(): MainDuJoueur
          + choisirCible(adversaireTerrain:Terrain, attaquant:Pokemon): Pokemon
        }
    }
    package Pokemon
    {
        package Elements
        {
            interface Element << interface >>
            {
              + getElmnt(): String
              + getFortContre(): String
              + getFaibleContre(): String
            }
            class Air implements Element
            {
                      + toString(): String
                      + getFaibleContre(): String
                      + getElmnt(): String
                      + getFortContre(): String
            }
            class Eau implements Element{
              + getFaibleContre(): String
              + toString(): String
              + getElmnt(): String
              + getFortContre(): String
            }
            class Feu implements Element{
              + getElmnt(): String
              + getFortContre(): String
              + getFaibleContre(): String
            }
            class Terre implements Element{
              + getFaibleContre(): String
              + getElmnt(): String
              + getFortContre(): String
            }
        }

        package EnsemblePokemon
        {
            abstract class EnsemblePokemon << abstract >> {
              + getPokemon(index:Integer): Pokemon
              + getPokemonByName(nom:String): Pokemon
              + getNbPokemon(): Integer
              + getEnsemble(): List<Pokemon>
              + transferPokemon(pokemon:Pokemon, destination:EnsemblePokemon)
            }
            class MainDuJoueur extends EnsemblePokemon{
              - m_mainJoueur: Pokemon[*]
              + <<Create>> MainDuJoueur()
              + getPokemon(index:Integer): Pokemon
              + getPokemonByName(nom:String): Pokemon
              + getNbPokemon(): Integer
              + getEnsemble(): List<Pokemon>
            }
            class Defausse extends EnsemblePokemon{
              - m_defausse: List<Pokemon>
              + <<Create>> Defausse()
              + getPokemonByName(String): Pokemon
              + getNbPokemon(): Integer
              + getEnsemble(): Pokemon[*]
              + getPokemon(index:Integer): Pokemon
            }
            class Pioche extends EnsemblePokemon{

              - m_pioche: List<Pokemon>
              + <<Create>> Pioche()
              + <<Create>> Pioche(Integer)
              + getPokemonByName(nom : String): Pokemon
              + getNbPokemon(): Integer
              + getEnsemble(): Pokemon[*]
              + getPokemon(index:Integer): Pokemon
            }

            class PokemonGenerateur {
              + {static} listeNomsPokemon : String[41]
              + {static} listePouvoirs : Pouvoir[8]
              + {static} genererPokemon(): Pokemon
            }

            class Terrain extends EnsemblePokemon {
              - m_terrain: Pokemon[*]
              + <<Create>> Terrain()
              + getEnsemble(): Pokemon[*]
              + getNbPokemon(): Integer
              + getPokemonAvecLeMoinsDeVie(): Pokemon
              + getPokemon(index:Integer): Pokemon
              + getPokemonByName(nom:String): Pokemon
              + ajouterPokemon(pokemon:Pokemon)
            }

        }
        package Pouvoirs
        {
            interface Pouvoir << interface >> {
              + activatePouvoir(p:Pokemon, j1:Player, robot:Player, joueur:Player)
              + description(): String
              + RetourALanormal(p:Pokemon, joueur:Player)
              + getNomPouvoir(): String
            }
            class Berserk implements Pouvoir {
              - m_pj1: Pokemon
              - m_pRobot: Pokemon
              + RetourALanormal(p:Pokemon, joueur:Player)
              + activatePouvoir(p:Pokemon, j1:Player, robot:Player, joueur:Player)
              + getPokemonJ1(Pokemon)
              + getNomPouvoir(): String
              + description(): String
              + getPokemonRobot(Pokemon)
            }
            class Ferveur_guerri√®re implements Pouvoir{
              + getNomPouvoir(): String
              + description(): String
              + activatePouvoir(p:Pokemon, j1:Player, robot:Player, joueur:Player)
              + RetourALanormal(p:Pokemon, joueur:Player)
            }
            class Intimidation implements Pouvoir{
              - m_pj1: Pokemon
              - m_pRobot: Pokemon
              + activatePouvoir(p:Pokemon, j1:Player, robot:Player, joueur:Player)
              + getPokemonRobot(p:Pokemon)
              + RetourALanormal(p:Pokemon, joueur:Player)
              + getNomPouvoir(): String
              + getPokemonJ1(p:Pokemon)
              + description(): String
            }
            class Kamikaze {
              + description(): String
              + activatePouvoir(p:Pokemon, j1:Player, robot:Player, joueur:Player)
              + RetourALanormal(p:Pokemon, joueur:Player)
              + getNomPouvoir(): String
            }
            class Peur {
              + description(): String
              + activatePouvoir(p:Pokemon, j1:Player, robot:Player, joueur:Player)
              + RetourALanormal(p:Pokemon, joueur:Player)
              + getNomPouvoir(): String
            }
            class Soin_de_zone {
              + description(): String
              + activatePouvoir(p:Pokemon, j1:Player, robot:Player, joueur:Player)
              + RetourALanormal(p:Pokemon, joueur:Player)
              + getNomPouvoir(): String
            }
            class Soin_simple {
              + description(): String
              + activatePouvoir(p:Pokemon, j1:Player, robot:Player, joueur:Player)
              + RetourALanormal(p:Pokemon, joueur:Player)
              + getNomPouvoir(): String
            }
            class Soin_total  {
              + description(): String
              + activatePouvoir(p:Pokemon, j1:Player, robot:Player, joueur:Player)
              + RetourALanormal(p:Pokemon, joueur:Player)
              + getNomPouvoir(): String
            }
        }
        class Pokemon {
          - m_attaque: Integer
          - m_pouvoir: Pouvoir
          - m_vie: Integer
          - m_nom: String
          - m_elements: Element
          - m_vieMax: Integer
          + Pokemon(nom:String, elements:Element, vie:Integer, attaque:Integer):
          + getM_attaque(): Integer
          + setVie(vie:Integer)
          + attaquer(adversaire:Pokemon)
          + presenter()
          + getNom_pouvoir(): String
          + getM_vieMax(): Integer
          + setPouvoir(pouvoir:Pouvoir)
          + getM_nom(): String
          + getVie(): Integer
          + getM_pouvoir(): Pouvoir
          + setM_attaque(attaque:Integer)
          + getM_elements(): Element
        }

    }

}



















class LeJeu {
  + LeJeu(JoueurHumain, RobotPlayer):
  - m_jHumain: JoueurHumain
  - m_jRobot: RobotPlayer
  - m_numTour: Integer
  - m_arret: Boolean
  - verifierFinJeu()
  + choix1erJoueur()
  + getM_numTour(): Integer
  + getM_jRobot(): RobotPlayer
  + phaseAttaquer(Integer)
  + getM_jHumain(): JoueurHumain
  + tousPokemonsElimines(Player): Boolean
  + PokemonMort(Pokemon): Boolean
  + Lunch()
  - nbPokemonsRestants(Player): Integer
  + MainJoueurs(Integer)
  - placementPokemon(Integer, Integer)
  - piochesJoueurs()
}
class Main {
  + Main():
  + main(String[])
}



























Air                      -[#008200,dashed]-^  Element
Berserk                 "1" *-[#595959,plain]-> "m_pj1\n1" Pokemon
Berserk                  -[#008200,dashed]-^  Pouvoir
Defausse                 -[#000082,plain]-^  EnsemblePokemon
Defausse                "1" *-[#595959,plain]-> "m_defausse\n*" Pokemon
Eau                      -[#008200,dashed]-^  Element
Extension_du_territoire  -[#008200,dashed]-^  Pouvoir
Ferveur_guerri√®re        -[#008200,dashed]-^  Pouvoir
Feu                      -[#008200,dashed]-^  Element
Intimidation            "1" *-[#595959,plain]-> "m_pj1\n1" Pokemon
Intimidation             -[#008200,dashed]-^  Pouvoir
JoueurHumain            "1" *-[#595959,plain]-> "m_defausse\n1" Defausse
JoueurHumain             -[#595959,dashed]->  Defausse                : "¬´create¬ª"
JoueurHumain             -[#595959,dashed]->  MainDuJoueur            : "¬´create¬ª"
JoueurHumain            "1" *-[#595959,plain]-> "m_main\n1" MainDuJoueur
JoueurHumain             -[#595959,dashed]->  Pioche                  : "¬´create¬ª"
JoueurHumain            "1" *-[#595959,plain]-> "m_pioche\n1" Pioche
JoueurHumain             -[#008200,dashed]-^  Player
JoueurHumain            "1" *-[#595959,plain]-> "m_terrain\n1" Terrain
JoueurHumain             -[#595959,dashed]->  Terrain                 : "¬´create¬ª"
Kamikaze                 -[#008200,dashed]-^  Pouvoir
LeJeu                   "1" *-[#595959,plain]-> "m_jHumain\n1" JoueurHumain
LeJeu                   "1" *-[#595959,plain]-> "m_jRobot\n1" RobotPlayer
Main                     -[#595959,dashed]->  JoueurHumain            : "¬´create¬ª"
Main                     -[#595959,dashed]->  Partie                  : "¬´create¬ª"
Main                     -[#595959,dashed]->  RobotPlayer             : "¬´create¬ª"
MainDuJoueur             -[#000082,plain]-^  EnsemblePokemon
MainDuJoueur            "1" *-[#595959,plain]-> "m_mainJoueur\n*" Pokemon
Partie                  "1" *-[#595959,plain]-> "m_jHumain\n1" JoueurHumain
Partie                  "1" *-[#595959,plain]-> "m_jRobot\n1" RobotPlayer
Partie                   -[#595959,dashed]->  Tour                    : "¬´create¬ª"
Peur                     -[#008200,dashed]-^  Pouvoir
Pioche                   -[#000082,plain]-^  EnsemblePokemon
Pioche                  "1" *-[#595959,plain]-> "m_pioche\n*" Pokemon
Pokemon                 "1" *-[#595959,plain]-> "m_elements\n1" Element
Pokemon                 "1" *-[#595959,plain]-> "m_pouvoir\n1" Pouvoir
PokemonGenerateur        -[#595959,dashed]->  Air                     : "¬´create¬ª"
PokemonGenerateur        -[#595959,dashed]->  Berserk                 : "¬´create¬ª"
PokemonGenerateur        -[#595959,dashed]->  Eau                     : "¬´create¬ª"
PokemonGenerateur        -[#595959,dashed]->  Ferveur_guerri√®re       : "¬´create¬ª"
PokemonGenerateur        -[#595959,dashed]->  Feu                     : "¬´create¬ª"
PokemonGenerateur        -[#595959,dashed]->  Intimidation            : "¬´create¬ª"
PokemonGenerateur        -[#595959,dashed]->  Kamikaze                : "¬´create¬ª"
PokemonGenerateur        -[#595959,dashed]->  Peur                    : "¬´create¬ª"
PokemonGenerateur        -[#595959,dashed]->  Pokemon                 : "¬´create¬ª"
PokemonGenerateur       "1" *-[#595959,plain]-> "listePouvoirs\n*" Pouvoir
PokemonGenerateur        -[#595959,dashed]->  Soin_de_zone            : "¬´create¬ª"
PokemonGenerateur        -[#595959,dashed]->  Soin_simple             : "¬´create¬ª"
PokemonGenerateur        -[#595959,dashed]->  Soin_total              : "¬´create¬ª"
PokemonGenerateur        -[#595959,dashed]->  Terre                   : "¬´create¬ª"
RobotPlayer             "1" *-[#595959,plain]-> "m_defausse\n1" Defausse
RobotPlayer              -[#595959,dashed]->  Defausse                : "¬´create¬ª"
RobotPlayer              -[#595959,dashed]->  MainDuJoueur            : "¬´create¬ª"
RobotPlayer             "1" *-[#595959,plain]-> "m_main\n1" MainDuJoueur
RobotPlayer              -[#595959,dashed]->  Pioche                  : "¬´create¬ª"
RobotPlayer             "1" *-[#595959,plain]-> "m_pioche\n1" Pioche
RobotPlayer              -[#008200,dashed]-^  Player
RobotPlayer             "1" *-[#595959,plain]-> "m_terrain\n1" Terrain
RobotPlayer              -[#595959,dashed]->  Terrain                 : "¬´create¬ª"
Soin_de_zone             -[#008200,dashed]-^  Pouvoir
Soin_simple              -[#008200,dashed]-^  Pouvoir
Soin_total               -[#008200,dashed]-^  Pouvoir
Terrain                  -[#000082,plain]-^  EnsemblePokemon
Terrain                 "1" *-[#595959,plain]-> "m_terrain\n*" Pokemon
Terre                    -[#008200,dashed]-^  Element
Tour                    "1" *-[#595959,plain]-> "m_jHumain\n1" JoueurHumain
Tour                     -[#595959,dashed]->  Pioche                  : "¬´create¬ª"
Tour                    "1" *-[#595959,plain]-> "m_jRobot\n1" RobotPlayer

@enduml